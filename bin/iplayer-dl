#!/usr/bin/env ruby

# Download iPlayer programmes by spoofing an iPhone
# Paul Battley - http://po-ru.com/
#
# Get the latest version via subversion:
# svn co http://paulbattley.googlecode.com/svn/iplayer-dl

require 'iplayer'
require 'optparse'

include IPlayer
include IPlayer::Errors

OPTIONS = {
  :type_preference  => %w[original signed],
  :download_path    => Dir.pwd,
  :http_proxy       => ENV['http_proxy']
}

opts = ARGV.options{ |o|
  o.banner << ' IDENTIFIER'
  o.define_head 'Download DRM-free videos from the BBC iPlayer, courtesy of their iPhone interface.'
  o.separator 'IDENTIFIER is the iPlayer viewing page URL or the PID of the programme.'
  o.separator ''
  o.on(
    '-t', '--type-preference=VERSION', String,
    'Video types in order of preference.',
    "Default is '#{OPTIONS[:type_preference].join(',')}'."
  ) { |s| OPTIONS[:type_preference] = s.split(/,\s*/) }
  o.on(
    '-d', '--download-path=PATH', String,
    'Location into which downloaded files will be saved.',
    'Default is current working directory.'
  ) { |OPTIONS[:download_path]| }
  o.on(
    '-p', '--http-proxy=HOST:PORT', String,
    'Specify an HTTP proxy.',
    'Default is taken from the http_proxy environment variable.'
  ) { |OPTIONS[:http_proxy]| }
  o.on_tail(
    '-h', '--help', 
    'Show this help message.'
  ) { puts o; exit }
}

begin
  opts.parse!
  pid = ARGV[0]
  raise 'no programme identifier specified' unless pid
rescue => exception
  $stderr.puts 'Error: '+exception, ''
  puts opts
  exit 1
end

if pid =~ %r!/item/([a-z0-9]{8})!
  pid = $1
end

if http_proxy = OPTIONS[:http_proxy]
  http_proxy = 'http://' + http_proxy unless http_proxy =~ %r{^http://}
  u = URI.parse(http_proxy)
  http = Net::HTTP::Proxy(u.host, u.port)
else
  http = Net::HTTP
end
browser = Browser.new(http)
downloader = Downloader.new(browser, pid)

begin
  available_versions = downloader.available_versions
  raise MP4Unavailable if available_versions.empty?
  version = available_versions.sort_by{ |v| 
    OPTIONS[:type_preference].index(v.name) || 100 
  }.first
  title = Metadata.new(pid, browser).full_title
  filename = "#{ title }.mov".gsub(/[^a-z0-9 \-\.]+/i, '')
  path = File.expand_path( File.join( OPTIONS[:download_path], filename ))

  old_percentage = nil
  if File.exist?(path)
    offset = File.size(path)
    $stderr.puts "Resuming download at #{offset} bytes."
  else
    offset = 0
  end

  File.open(path, 'a+b') do |io|
    downloader.download(version.pid, io, offset) do |position, max|
      percentage = "%.1f" % [((1000 * position) / max) / 10.0]
      if percentage != old_percentage
        old_percentage = percentage
        $stderr.print "\r#{ percentage }% #{ filename } (#{ version.name })"
        $stderr.flush
      end
    end
  end
  $stderr.puts

rescue ParsingError    
  $stderr.puts(
    "Unable to parse the programme page. Possible reasons:",
    "1. The iPlayer has changed", 
    "2. You are outside the UK (and not using a UK proxy)."
  )
  exit 1
rescue FileUnavailable
  $stderr.puts(
    "An MP4 URL was found, but the download failed."
  )
  exit 1
rescue MP4Unavailable
  $stderr.puts(
    "This programme is not currently available in an MP4 version."
  )
  exit 1
end
